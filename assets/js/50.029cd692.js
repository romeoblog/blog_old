(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{221:function(a,t,r){"use strict";r.r(t);var e=r(4),s=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"java-面向对象特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-面向对象特性","aria-hidden":"true"}},[a._v("#")]),a._v(" Java 面向对象特性")]),a._v(" "),r("h2",{attrs:{id:"封装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#封装","aria-hidden":"true"}},[a._v("#")]),a._v(" 封装")]),a._v(" "),r("p",[a._v("封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。")]),a._v(" "),r("h2",{attrs:{id:"继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),r("p",[a._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。")]),a._v(" "),r("p",[r("strong",[a._v("关于继承如下 3 点请记住：")])]),a._v(" "),r("ol",[r("li",[a._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),r("strong",[a._v("只是拥有")]),a._v("。")]),a._v(" "),r("li",[a._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),a._v(" "),r("li",[a._v("子类可以用自己的方式实现父类的方法。（以后介绍）。")])]),a._v(" "),r("h2",{attrs:{id:"多态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多态","aria-hidden":"true"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),r("p",[a._v("所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。")]),a._v(" "),r("p",[a._v("在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。")])])},[],!1,null,null,null);t.default=s.exports}}]);